#!/usr/bin/env python

import signal
import sys
from PySide.QtCore import *
from PySide.QtGui import *
from FilterBox import *
from DataModel import *
from OpenGL.GLUT import glutInit

class MainWindow(QMainWindow):

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.datatree = DataTree()
        self.agent = TopModule(self, self.datatree)
        self.centralWidget = QSplitter(Qt.Horizontal)

        # Control Frame
        self.control_frame = QFrame(self)
        self.makeControlFrame()
        self.centralWidget.addWidget(self.control_frame)
        self.centralWidget.setStretchFactor(0, 0)

        # Filter group
        self.filter_box = FilterBoxView(self, \
            title = "Boxfish", parent_view = self)
        self.centralWidget.addWidget(self.filter_box)
        self.centralWidget.setStretchFactor(1, 1)

        self.setCentralWidget(self.centralWidget)

        self.createMenus()
        self.setWindowTitle("Boxfish")
        self.resize(1000, 800)


    def makeControlFrame(self):
        layout = QVBoxLayout(self.control_frame)
        self.sidesplitter = QSplitter(Qt.Vertical)

        # Data tree
        self.data_view = QTreeView(self.control_frame)
        self.data_view.setModel(self.datatree)
        self.data_view.setDragEnabled(True)
        self.data_view.setDropIndicatorShown(True)
        self.data_view.setSelectionMode(QAbstractItemView.ExtendedSelection)
        #self.data_view.setHeaderHidden(True)
        self.sidesplitter.addWidget(self.data_view)
        self.sidesplitter.setStretchFactor(0,1)

        # Module list
        module_view = QTreeView(self.control_frame)
        module_model = ModuleListModel(self.findModules())
        module_view.setModel(module_model)
        module_view.setDragEnabled(True)
        module_view.setDropIndicatorShown(True)
        self.sidesplitter.addWidget(module_view)
        self.sidesplitter.setStretchFactor(1,0)


        layout.addWidget(self.sidesplitter)
        self.control_frame.setLayout(layout)

    def createMenus(self):
        self.fileMenu = self.menuBar().addMenu("&File")
        self.fileMenu.addAction(QAction("&Open Run", self,
            shortcut = QKeySequence.Open, triggered=self.runOpen))
        self.fileMenu.addAction(QAction("&Quit", self,
            shortcut = "Ctrl+Q", triggered = self.close))

    def runOpen(self):
        filename, filtr = QFileDialog.getOpenFileName(self)
        if filename == u'':
            return

        self.openRun(filename)

    def openRun(self, *runs):
        """User callable method to tell boxfish to open a file."""
        for run in runs:
            self.datatree.insertRun(run)
        self.data_view.expandAll() #For now

    #TODO: Read other directories to add from config file and add them
    def findModules(self):
        modules = list()

        # Import the modules package
        saved_syspath = sys.path[:] # Save true sys.path
        sys.path.insert(0, os.path.dirname(__file__)) # Set sys.path to boxfish filedir
        __import__("mods") # import!
        sys.path = saved_syspath # Revert true sys.path

        modules = ModuleView().subclassList()
        return modules

    def findPosition(self):
        return (self.x() + self.parent().findPosition(),
            self.y() + self.parent().findPosition())


class TopModule(ModuleAgent):
    """Module for handling top of agent tree interactions.
    """

    def __init__(self, parent, datatree):
        super(TopModule, self).__init__(parent, datatree)


    # You can't add requirements to this agent
    def addRequirement(self, coupler):
        raise UserWarning("Top agent should not have own requirements.")

    # Since this is the top agent which doesn't have any
    # filters or interface or anything, any column we receive
    # should automatically get all table identifiers
    @Slot(FilterCoupler, ModuleAgent)
    def addChildCoupler(self, coupler, child):
        super(TopModule, self).addChildCoupler(coupler, child)
        # emit on new child column to start the chain
        self.child_requirements[-1].changeSignal.emit(self.child_requirements[-1])


class ModuleListModel(QStringListModel):
    """Simple datatree for interactions with list of available modules.
    """

    def __init__(self, slist):
        super(ModuleListModel, self).__init__(slist)
        pass

    def mimeData(self, index):
        return ModuleNameMime(self.data(index[0], 0))

    def headerData(self, section, orientation, role):
        if role == Qt.DisplayRole:
            if section == 0:
                return "Modules"


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    # May be called on some systems, not on others and the latter
    # will crash without it if GLUT stuff is used.
    glutInit(sys.argv) 

    app = QApplication(sys.argv)
    #app.setStyle('plastique')
    bf = MainWindow()

    # Open runs based on command line arguments
    if len(sys.argv) > 1:
        bf.openRun(*sys.argv[1:])

    bf.show()
    bf.raise_()
    sys.exit(app.exec_())





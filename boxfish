#!/usr/bin/env python

import signal
import sys
from PySide.QtCore import *
from PySide.QtGui import *
from FilterBox import *
from DataModel import *

class MainWindow(QMainWindow):

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.model = DataTree()
        self.module = TopModule(self, self.model)
        self.centralWidget = QSplitter(Qt.Horizontal)

        # Control Frame
        self.control_frame = QFrame(self)
        self.makeControlFrame()
        self.centralWidget.addWidget(self.control_frame)
        self.centralWidget.setStretchFactor(0, 0)

        # Filter group
        self.filter_box = FilterBoxWindow(self, \
            title = "Boxfish", parent_view = self)
        self.centralWidget.addWidget(self.filter_box)
        self.centralWidget.setStretchFactor(1, 1)

        self.setCentralWidget(self.centralWidget)

        self.createMenus()
        self.setWindowTitle("Boxfish")
        self.resize(1000, 800)


    def makeControlFrame(self):
        layout = QVBoxLayout(self.control_frame)
        self.toolbox = QToolBox(self.control_frame)

        # Data tree
        self.data_view = QTreeView(self.control_frame)
        self.data_view.setModel(self.model)
        self.data_view.setDragEnabled(True)
        self.data_view.setDropIndicatorShown(True)
        self.data_view.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.data_view.setHeaderHidden(True)
        self.toolbox.addItem(self.data_view, "Data")

        # Projection tree
        filter_view = QListView(self.control_frame)
        self.toolbox.addItem(filter_view, "Filters")

        # Module list
        module_view = QListView(self.control_frame)
        module_model = ModuleListModel(self.findModules())
        module_view.setModel(module_model)
        module_view.setDragEnabled(True)
        module_view.setDropIndicatorShown(True)
        self.toolbox.addItem(module_view, "Modules")


        layout.addWidget(self.toolbox)
        self.control_frame.setLayout(layout)

    def createMenus(self):
        self.fileMenu = self.menuBar().addMenu("&File")
        self.fileMenu.addAction(QAction("&Open Run", self,
            shortcut = QKeySequence.Open, triggered=self.runOpen))
        self.fileMenu.addAction(QAction("&Quit", self,
            shortcut = "Ctrl+Q", triggered = self.close))

    def runOpen(self):
        filename, filtr = QFileDialog.getOpenFileName(self)
        if filename == u'':
            return

        self.openRun(filename)

    def openRun(self, *runs):
        """User callable method to tell boxfish to open a file."""
        for run in runs:
            self.model.insertRun(run)

    #TODO: Read other directories to add from config file and add them
    def findModules(self):
        modules = list()

        # Import the modules package
        saved_syspath = sys.path[:] # Save true sys.path
        sys.path.insert(0, os.path.dirname(__file__)) # Set sys.path to boxfish filedir
        __import__("mods") # import!
        sys.path = saved_syspath # Revert true sys.path

        modules = ModuleView().subclassList()
        return modules


class TopModule(ModuleAgent):
    """Module for handling top of module tree interactions.
    """

    def __init__(self, parent, model):
        super(TopModule, self).__init__(parent, model)


    # You can't add requirements to this module
    def addRequirement(self, col):
        raise UserWarning("Top module should not have own requirements.")

    # Since this is the top module which doesn't have any
    # filters or interface or anything, any column we receive
    # should automatically get all table identifiers
    @Slot(BFColumn, ModuleAgent)
    def addChildColumn(self, col, child):
        super(TopModule, self).addChildColumn(col, child)
        col.changeSignal.emit(col)




class ModuleListModel(QStringListModel):
    """Simple model for interactions with list of available modules.
    """

    def __init__(self, slist):
        super(ModuleListModel, self).__init__(slist)
        pass

    def mimeData(self, index):
        return ModuleNameMime(self.data(index[0], 0))


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app = QApplication(sys.argv)
    #app.setStyle('plastique')
    bf = MainWindow()

    # Open runs based on command line arguments
    if len(sys.argv) > 1:
        bf.openRun(*sys.argv[1:])

    bf.show()
    bf.raise_()
    sys.exit(app.exec_())




